package leetcode;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Solution_0036 {
    /**
     * 有效的数独
     * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
     *
     * 数字 1-9 在每一行只能出现一次。
     * 数字 1-9 在每一列只能出现一次。
     * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
     *
     *
     * 上图是一个部分填充的有效的数独。
     *
     * 数独部分空格内已填入了数字，空白格用 '.' 表示。
     *
     * 示例 1:
     *
     * 输入:
     * [
     *   ["5","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: true
     * 示例 2:
     *
     * 输入:
     * [
     *   ["8","3",".",".","7",".",".",".","."],
     *   ["6",".",".","1","9","5",".",".","."],
     *   [".","9","8",".",".",".",".","6","."],
     *   ["8",".",".",".","6",".",".",".","3"],
     *   ["4",".",".","8",".","3",".",".","1"],
     *   ["7",".",".",".","2",".",".",".","6"],
     *   [".","6",".",".",".",".","2","8","."],
     *   [".",".",".","4","1","9",".",".","5"],
     *   [".",".",".",".","8",".",".","7","9"]
     * ]
     * 输出: false
     * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
     *
     * 说明:
     *
     * 一个有效的数独（部分已被填充）不一定是可解的。
     * 只需要根据以上规则，验证已经填入的数字是否有效即可。
     * 给定数独序列只包含数字 1-9 和字符 '.' 。
     * 给定数独永远是 9x9 形式的。
     */

    public boolean isValidSudoku(char[][] board) {
        Map<String, Set<Character>> map = new HashMap<>();
        Map<Integer, Set<Character>> mapRow = new HashMap<>();
        Map<Integer, Set<Character>> mapCol = new HashMap<>();

        for (int x = 0; x < board.length; x++) {
            for (int y = 0; y < board[x].length; y++) {
                char ch = board[x][y];
                int xx = x / 3;
                int yy = y / 3;
                String key = String.valueOf(xx * 3 + yy);
                Set<Character> set = map.get(key);
                if (set == null) {
                    set = new HashSet<>();
                    set.add(ch);
                    map.put(key, set);
                } else {
                    if (ch != '.' && set.contains(ch)) {
                        return false;
                    }
                    set.add(ch);
                }

                if (rowOrCol(mapRow, x, ch)) return false;

                if (rowOrCol(mapCol, y, ch)) return false;
            }
        }
        return true;
    }

    private boolean rowOrCol(Map<Integer, Set<Character>> map, int k, char ch) {
        Set<Character> set = map.get(k);
        if (set == null) {
            set = new HashSet<>();
            set.add(ch);
            map.put(k, set);
        } else {
            if (ch != '.' && set.contains(ch))
                return true;
            else
                set.add(ch);
        }
        return false;
    }

    public static void main(String[] args) {
        /**
         * 输入：
         * [["8","3",".",".","7",".",".",".","."],
         * ["6",".",".","1","9","5",".",".","."],
         * [".","9","8",".",".",".",".","6","."],
         * ["8",".",".",".","6",".",".",".","3"],
         * ["4",".",".","8",".","3",".",".","1"],
         * ["7",".",".",".","2",".",".",".","6"],
         * [".","6",".",".",".",".","2","8","."],
         * [".",".",".","4","1","9",".",".","5"],
         * [".",".",".",".","8",".",".","7","9"]]
         * 预期：
         * false
         */

        System.out.println(new Solution_0036().isValidSudoku(new char[][]{{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}}));
    }
}
